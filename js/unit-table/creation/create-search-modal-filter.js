import SETTINGS from"../../../assets/settings.js";import UnitData from"../../data/unit-data.js";import{getUnitTraitTargets}from"../../helper/calculate-stat-mult.js";import{calculateCost,calculateDamage,calculateHealth,calculateKnockbacks,calculateRange,calculateRechargeTime,calculateSpeed,CALCULATOR_LEVEL_OPTIONS}from"../../helper/calculate-stats.js";const rarityMap={N:"Normal",EX:"Special",RR:"Rare",SR:"Super Rare",UR:"Uber Rare",LR:"Legend Rare"};export function createNameFilterInput(){const output={};return output.obj=document.createElement("input"),output.obj.id="advanced-name-filter",output.obj.type="text",output.obj.maxLength=60,output.obj.placeholder="Search for ID/Name...",output.filterCallback=u=>{const unitNames=[u.normal_form,u.evolved_form,u.true_form,u.ultra_form];return[...new Array(u.max_form+1).keys()].filter(i=>unitNames[i]?.toLowerCase().includes(output.obj.value.trim().toLowerCase())??!1)},output}export function createOwnedFilterInput(){const output={},input=document.createElement("input");input.id="advanced-owned-filter",input.type="checkbox",input.checked=!0;const label=document.createElement("label");return label.textContent="Only Show Owned",label.title="Search results will only include units and upgrades currently unlocked",label.htmlFor="advanced-owned-filter",output.obj=document.createElement("div"),output.obj.id="advanced-owned-wrapper",output.obj.classList.add("advaced-label-spacer"),output.obj.append(label,input),output.filterCallback=u=>!input.checked||u.level>0,output}export function createRarityFilterInput(){const output={},wrapper=document.createElement("div");wrapper.classList.add("advanced-wrapper");const wrapperLabel=document.createElement("h4");wrapperLabel.textContent="Rarity";const wrapperContent=document.createElement("div");wrapperContent.id="advanced-rarity-spacer";for(const rarity of["Normal","Special","Rare","Super Rare","Uber Rare","Legend Rare"]){const btn=document.createElement("button");btn.classList.add("advanced-rarity-selector","inactive"),btn.classList.add(`${rarity.toLowerCase().replaceAll(" ","-")}-color`),"Legend Rare"===rarity&&btn.classList.add("legend-rare-animation"),btn.textContent=rarity,btn.onclick=()=>btn.classList.toggle("inactive"),wrapperContent.appendChild(btn)}return wrapper.append(wrapperLabel,wrapperContent),output.obj=wrapper,output.filterCallback=u=>{const rarities=[...wrapperContent.querySelectorAll(".advanced-rarity-selector")];return rarities.every(r=>r.classList.contains("inactive"))||rarities.some(r=>!r.classList.contains("inactive")&&r.textContent===rarityMap[u.rarity])},output}export function createTargetTraitFilterInput(){const output={},wrapper=document.createElement("div");wrapper.classList.add("advanced-wrapper");const wrapperLabel=document.createElement("h4");wrapperLabel.textContent="Target Traits";const wrapperContent=document.createElement("div");wrapperContent.id="advanced-trait-spacer";for(const trait of SETTINGS.traits){const btnWrapper=document.createElement("div");btnWrapper.classList.add("advanced-trait-selector-wrapper","inactive"),btnWrapper.dataset.trait=trait;const btn=document.createElement("img");btn.classList.add("advanced-trait-selector"),btn.src=`./assets/img/ability/Target_${trait}.png`,btn.title=trait;const btnSlash=document.createElement("span");btnSlash.innerHTML='\n        <svg viewBox="0 0 100 100">\n            <line x1="0" y1="100" x2="100" y2="0" />\n        </svg>',btnWrapper.onclick=()=>btnWrapper.classList.toggle("inactive"),btnWrapper.append(btn,btnSlash),wrapperContent.appendChild(btnWrapper)}return wrapper.append(wrapperLabel,wrapperContent),output.obj=wrapper,output.filterCallback=u=>[...new Array(u.max_form+1).keys()].map(form=>{const output=[],unitCpy=UnitData.dataToRecord(u);unitCpy.current_form=form;let formTraits=getUnitTraitTargets(u,unitCpy,!0,!1);return output.push([...wrapperContent.querySelectorAll(".advanced-trait-selector-wrapper")].every(w=>w.classList.contains("inactive")||formTraits.includes(w.dataset.trait??""))),form<2?(output.push(!1,!1),output):(unitCpy.talents=u.talents.map(t=>t.cap),formTraits=getUnitTraitTargets(u,unitCpy,!0,!1),output.push([...wrapperContent.querySelectorAll(".advanced-trait-selector-wrapper")].every(w=>w.classList.contains("inactive")||formTraits.includes(w.dataset.trait??""))),unitCpy.ultra_talents=u.ultra_talents.map(t=>t.cap),formTraits=getUnitTraitTargets(u,unitCpy,!0,!1),output.push([...wrapperContent.querySelectorAll(".advanced-trait-selector-wrapper")].every(w=>w.classList.contains("inactive")||formTraits.includes(w.dataset.trait??""))),output)}),output}export function createAbilityFilterInput(){const output={},wrapper=document.createElement("div");wrapper.classList.add("advanced-wrapper");const wrapperLabel=document.createElement("h4");wrapperLabel.textContent="Abilities";const wrapperContent=document.createElement("div");wrapperContent.id="advanced-ability-spacer";for(const group of SETTINGS.abilityGroupings){const groupWrapper=document.createElement("div");groupWrapper.classList.add("advanced-ability-group");for(const ability of group){const btn=document.createElement("img");btn.src=`./assets/img/ability/${ability}.png`,btn.dataset.ability=ability,btn.classList.add("advanced-ability-selector","inactive"),btn.title=ability.replaceAll("_"," "),btn.onclick=()=>btn.classList.toggle("inactive"),groupWrapper.appendChild(btn)}wrapperContent.appendChild(groupWrapper)}return wrapper.append(wrapperLabel,wrapperContent),output.obj=wrapper,output.filterCallback=u=>[...new Array(u.max_form+1).keys()].map(form=>{const output=[],unitCpy=structuredClone(u);return unitCpy.current_form=form,output.push([...wrapperContent.querySelectorAll(".advanced-ability-selector")].every(w=>w.classList.contains("inactive")||UnitData.hasAbility(unitCpy,w.dataset.ability??"",form))),form<2?(output.push(!1,!1),output):(unitCpy.talents.map(t=>t.value=t.cap),output.push([...wrapperContent.querySelectorAll(".advanced-ability-selector")].every(w=>w.classList.contains("inactive")||UnitData.hasAbility(unitCpy,w.dataset.ability??"",form))),unitCpy.ultra_talents.map(t=>t.value=t.cap),output.push([...wrapperContent.querySelectorAll(".advanced-ability-selector")].every(w=>w.classList.contains("inactive")||UnitData.hasAbility(unitCpy,w.dataset.ability??"",form))),output)}),output}export function createStatFilterInput(ownedCheckbox){const output={},wrapper=document.createElement("div");wrapper.classList.add("advanced-wrapper");const wrapperLabel=document.createElement("h4");wrapperLabel.textContent="Stats";const useTraitsWrapper=document.createElement("div");useTraitsWrapper.classList.add("advaced-label-spacer"),useTraitsWrapper.title="Calculate damage as if unit is hitting their target traits";const useTraits=document.createElement("input");useTraits.type="checkbox",useTraits.checked=!0,useTraits.id="advanced-use-traits";const useTraitsLabel=document.createElement("label");useTraitsLabel.textContent="Traited Damage",useTraitsWrapper.append(useTraitsLabel,useTraits);const unitLevelSimWrapper=document.createElement("div");unitLevelSimWrapper.id="advanced-level-box",unitLevelSimWrapper.classList.add("advaced-label-spacer");const unitLevelSimLabel=document.createElement("label");unitLevelSimLabel.textContent="Set Level:",unitLevelSimLabel.id="advanced-level-sim-label",unitLevelSimWrapper.appendChild(unitLevelSimLabel);const levelMap=[[CALCULATOR_LEVEL_OPTIONS.LEVEL_CURRENT,"Current"],[CALCULATOR_LEVEL_OPTIONS.LEVEL_1,"1"],[CALCULATOR_LEVEL_OPTIONS.LEVEL_30,"30"],[CALCULATOR_LEVEL_OPTIONS.LEVEL_50,"50"],[CALCULATOR_LEVEL_OPTIONS.LEVEL_MAX,"Max"]];for(const[data,str]of levelMap){const btn=document.createElement("button");btn.classList.add("advanced-level-option"),btn.classList.toggle("inactive",data!==CALCULATOR_LEVEL_OPTIONS.LEVEL_CURRENT),btn.textContent=`${str}`,btn.dataset.levelType=`${data}`,btn.onclick=()=>{unitLevelSimWrapper.querySelectorAll(".advanced-level-option").forEach(b=>b.classList.add("inactive")),btn.classList.remove("inactive")},unitLevelSimWrapper.appendChild(btn)}const wrapperContent=document.createElement("div");wrapperContent.id="advanced-stats-spacer";const{obj:stat1,filterCallback:statCallback1}=createSingleStatFilterInput("cost","Cost",calculateCost,ownedCheckbox,useTraits),{obj:stat2,filterCallback:statCallback2}=createSingleStatFilterInput("health","Health",calculateHealth,ownedCheckbox,useTraits),{obj:stat3,filterCallback:statCallback3}=createSingleStatFilterInput("damage","Damage",calculateDamage,ownedCheckbox,useTraits),{obj:stat4,filterCallback:statCallback4}=createSingleStatFilterInput("knockbacks","Knockbacks",calculateKnockbacks,ownedCheckbox,useTraits),{obj:stat5,filterCallback:statCallback5}=createSingleStatFilterInput("cooldown","Recharge Time",calculateRechargeTime,ownedCheckbox,useTraits),{obj:stat6,filterCallback:statCallback6}=createSingleStatFilterInput("range","Range",calculateRange,ownedCheckbox,useTraits),{obj:stat7,filterCallback:statCallback7}=createSingleStatFilterInput("speed","Speed",calculateSpeed,ownedCheckbox,useTraits);return wrapperContent.append(useTraitsWrapper,unitLevelSimWrapper,stat1,stat2,stat3,stat4,stat5,stat6,stat7),wrapper.append(wrapperLabel,wrapperContent),output.obj=wrapper,output.filterCallback=u=>[...new Array(u.max_form+1).keys()].map(form=>{const output=[],unitCpy=structuredClone(u);return unitCpy.current_form=form,output.push(testAllStats(unitCpy,form,statCallback1,statCallback2,statCallback3,statCallback4,statCallback5,statCallback6,statCallback7)),form<2?(output.push(!1,!1),output):(unitCpy.talents.map(t=>t.value=t.cap),output.push(testAllStats(unitCpy,form,statCallback1,statCallback2,statCallback3,statCallback4,statCallback5,statCallback6,statCallback7)),unitCpy.ultra_talents.map(t=>t.value=t.cap),output.push(testAllStats(unitCpy,form,statCallback1,statCallback2,statCallback3,statCallback4,statCallback5,statCallback6,statCallback7)),output)}),output}export function testAllStats(u,form,...callbacks){let flag=!0;for(const callback of callbacks)flag=flag&&callback(u).includes(form);return flag}export function createSingleStatFilterInput(statName,displayName,statCallback,ownedCheckbox,useTraits){const output={},wrapper=document.createElement("div");wrapper.classList.add("advanced-single-stat-wrapper");const wrapperLabel=document.createElement("p");wrapperLabel.classList.add("advanced-stat-label"),wrapperLabel.textContent=displayName;const minValue=document.createElement("input");minValue.type="text",minValue.min="0",minValue.max="1000000000",minValue.placeholder="0",minValue.oninput=()=>{let str=minValue.value.replaceAll(/[^0-9.]+/g,"");const pos=str.indexOf(".");pos>0&&(str=str.slice(0,pos+1)+str.slice(pos+1).replaceAll(".","")),minValue.value=str};const maxValue=document.createElement("input");return maxValue.type="text",maxValue.min="0",maxValue.max="1000000000",maxValue.placeholder="∞",maxValue.oninput=()=>{let str=maxValue.value.replaceAll(/[^0-9.]+/g,"");const pos=str.indexOf(".");pos>0&&(str=str.slice(0,pos+1)+str.slice(pos+1).replaceAll(".","")),maxValue.value=str},wrapper.append(minValue,"≤",wrapperLabel,"≤",maxValue),output.obj=wrapper,output.filterCallback=u=>{let modData=UnitData.dataToRecord(u);ownedCheckbox.checked||(modData.talents=u.talents.map(t=>t.cap),modData.ultra_talents=u.talents.map(ut=>ut.cap));const testLevelValue=parseInt(document.querySelector("#advanced-level-box .advanced-level-option:not(.inactive)").dataset.levelType??"0");return[...new Array(u.max_form+1).keys()].filter(i=>{modData.current_form=i;const calcStat=statCallback(u.stats[i][statName],modData,u,{targetTraits:useTraits?SETTINGS.traits:[],targetSubTraits:useTraits?SETTINGS.subTraits:[],testLevelValue:testLevelValue,includeTalents:!0,includeOrbs:!0,eocChapterPrice:2,talentIgnoreForm:!1});return parseFloat(minValue.value||"0")<=calcStat&&calcStat<=parseFloat(maxValue.value||"1000000000")})},output}export function createRandom10FilterInput(){const output={},input=document.createElement("input");input.id="advanced-random10-filter",input.type="checkbox",input.checked=!1;const label=document.createElement("label");return label.textContent="Random 10",label.title="Search results will only show (up to) 10 out of all units that met the search criteria",label.htmlFor="advanced-random10-filter",output.obj=document.createElement("div"),output.obj.classList.add("advaced-label-spacer"),output.obj.append(label,input),output.filterCallback=units=>{if(!input.checked)return units;const res=[];for(let x=0;x<10&&units.length>0;x++)res.push(units.splice(Math.floor(Math.random()*units.length),1)[0]);return res},output}