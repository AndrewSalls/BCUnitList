import Papa from"../papaparse5.5.2.min.js";import TALENT_NP_MAP from"../../assets/talent-np-map.js";import UT_NP_MAP from"../../assets/ut-np-map.js";import ORB_MAP from"../../assets/orb-map.js";import{RARITY}from"../data/unit-data.js";let levelingCost,pause=!1;function isInitialized(){return!!levelingCost}async function initializeLeveling(){pause||isInitialized()||(pause=!0,levelingCost=await fetch("./assets/unit_data/leveling_stats.csv").then(r=>r.text()).then(t=>Papa.parse(t,{header:!0,dynamicTyping:!0,skipEmptyLines:!0}).data).catch(e=>console.error(e)))}export default async function getCostsFor(unitList){isInitialized()||await initializeLeveling(),unitList.sort((a,b)=>a.id-b.id);const tables=Object.groupBy(unitList,v=>100*Math.floor(v.id/100)),promises=[],tableAllValues={formXP:0,lvl30XP:0,lvlMaxXP:0,maxNP:0,sOrb:0,catseye_EX:0,catseye_RR:0,catseye_SR:0,catseye_UR:0,catseye_LR:0,catseye_dark:0,green_fruit:0,purple_fruit:0,red_fruit:0,blue_fruit:0,yellow_fruit:0,epic_fruit:0,elder_fruit:0,aku_fruit:0,gold_fruit:0,green_seed:0,purple_seed:0,red_seed:0,blue_seed:0,yellow_seed:0,epic_seed:0,elder_seed:0,aku_seed:0,gold_seed:0,green_gem:0,purple_gem:0,red_gem:0,blue_gem:0,yellow_gem:0,green_stone:0,purple_stone:0,red_stone:0,blue_stone:0,yellow_stone:0,epic_stone:0,ultra:{},has_units:!1,has_ubers:!1},{has_units:_1,has_ubers:_2,ultra:_3,...tableUltraValues}=tableAllValues;if(0===unitList.length)return tableAllValues.ultra=tableUltraValues,tableAllValues.has_units=!1,tableAllValues.has_ubers=!1,tableAllValues;for(const key of Object.keys(tables)){const numKey=parseInt(key);promises.push(fetch(`./assets/unit_data/unit_costs_${numKey}.csv`).then(r=>r.text()).then(t=>Papa.parse(t,{header:!0,dynamicTyping:!0,skipEmptyLines:!0}).data).then(entries=>{for(const unit of tables[key]){const row=entries[unit.id-numKey],xpTable=getLevelingCosts(unit.rarity,row.LevelFormat);unit.max_form>=2&&unit.current_form<2&&(tableAllValues.formXP+=row.TrueXPCost),unit.max_form>=3&&unit.current_form<3&&(tableAllValues.formXP+=row.UltraXPCost,tableUltraValues.formXP+=row.UltraXPCost);const lvl30=Math.min(30,unit.level_cap.MaxLevel);if(unit.level<lvl30&&(tableAllValues.lvl30XP+=getXPToLvl(xpTable,lvl30,unit.level)),unit.level<unit.level_cap.MaxLevel&&(tableAllValues.lvlMaxXP+=getXPToLvl(xpTable,unit.level_cap.MaxLevel,unit.level),unit.level_cap.MaxLevel>50&&(tableUltraValues.lvlMaxXP+=getXPToLvl(xpTable,unit.level_cap.MaxLevel,Math.max(unit.level,50)))),unit.talents.length>0){const talentNPCosts=`${row.TalentNP}`.split("-");unit.talents.forEach((talent,i)=>{talent.value<talent.cap&&(tableAllValues.maxNP+=getNPToLvl(TALENT_NP_MAP[unit.rarity][talentNPCosts[i]],talent.value))})}if(unit.ultra_talents.length>0){const ultraTalentNPCosts=`${row.UltraTalentNP}`.split("-");unit.ultra_talents.forEach((talent,i)=>{if(talent.value<talent.cap){const npIncrease=getNPToLvl(UT_NP_MAP[ultraTalentNPCosts[i]],talent.value);tableAllValues.maxNP+=npIncrease,tableUltraValues.maxNP+=npIncrease}})}if(unit.orb.length>0&&(tableAllValues.sOrb+=null===unit.orb[0]||unit.orb[0].rank!==ORB_MAP.ranks.length-1?1:0),unit.orb.length>1){const isSRank=null===unit.orb[1]||unit.orb[1].rank!==ORB_MAP.ranks.length-1?1:0;tableAllValues.sOrb+=isSRank,tableUltraValues.sOrb+=isSRank}if(unit.level_cap.MaxLevel>30&&(tableAllValues[`catseye_${unit.rarity}`]+=15-Math.max(0,Math.min(15,unit.level-30)),tableAllValues[`catseye_${unit.rarity}`]+=10-2*Math.max(0,Math.min(5,unit.level-45))),unit.level_cap.MaxLevel>50&&(tableAllValues.catseye_dark+=5-Math.max(0,Math.min(5,unit.level-50)),tableAllValues.catseye_dark+=10-2*Math.max(0,Math.min(5,unit.level-55)),tableUltraValues.catseye_dark=tableAllValues.catseye_dark),unit.current_form<2)for(let x=1;x<=5;x++){const material=row[`TrueMaterial${x}`];material&&(tableAllValues[material]+=parseInt(row[`TrueMaterialCount${x}`]))}if(unit.current_form<3)for(let x=1;x<=5;x++){const material=row[`UltraMaterial${x}`];if(material){const increase=parseInt(row[`UltraMaterialCount${x}`]);tableAllValues[material]+=increase,tableUltraValues[material]+=increase}}}}))}return await Promise.all(promises),tableAllValues.ultra=tableUltraValues,tableAllValues.has_units=!0,tableAllValues.has_ubers=unitList.some(u=>"UR"===u.rarity),tableAllValues}function getXPToLvl(xpTable,targetLvl,lvl){let sum=0;for(let x=lvl+1;x<=targetLvl;x++)sum+=xpTable[x];return sum}function getNPToLvl(npTable,lvl){let sum=0;for(let x=lvl;x<npTable.length;x++)sum+=npTable[x];return sum}function getLevelingCosts(rarity,levelFormat){if(levelFormat)return levelingCost.find(c=>c.Type===levelFormat);switch(rarity){case RARITY.SPECIAL:case RARITY.RARE:return levelingCost.find(c=>"GachaRare"===c.Type);case RARITY.SUPER_RARE:return levelingCost.find(c=>"GachaSR"===c.Type);case RARITY.UBER_RARE:case RARITY.LEGEND_RARE:return levelingCost.find(c=>"UR"===c.Type);case RARITY.NORMAL:default:return console.error("Attempting to get standard leveling cost for invalid rarity."),{}}}