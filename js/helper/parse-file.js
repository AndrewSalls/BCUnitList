import Papa from"../papaparse5.5.2.min.js";import SETTINGS from"../../assets/settings.js";import{FORM}from"../data/unit-data.js";import{decodeUnit}from"./encoder.js";async function getLevelCaps(){return fetch("./assets/unit_data/level_cap_stats.csv").then(r=>r.text()).then(t=>Papa.parse(t,{header:!0,dynamicTyping:!0,skipEmptyLines:!0}).data).catch(e=>console.error(e))}export async function getUnitData(categories){const unitCount=SETTINGS.unitCount,levelCaps=await getLevelCaps(),collabUnits=[...Object.values(categories.collabs).flat(),...Object.values(categories.small_collabs).flat()],unobtainableUnits=categories.other.Unobtainable;let totalLevel=0;const awaitFinish=[];for(let x=0;x<=Math.floor(unitCount/100);x++)awaitFinish.push(new Promise(res=>{readDescriptiveData(100*x,levelCaps).then(desc=>{readStatData(100*x).then(stats=>{for(let p=0;p<desc.length;p++)totalLevel+=desc[p].level+desc[p].plus_level,desc[p].stats=stats[p],desc[p].collab=collabUnits.includes(desc[p].id),desc[p].unobtainable=unobtainableUnits.includes(desc[p].id);res(desc)})})}));const output=(await Promise.all(awaitFinish)).flat();return window.localStorage.setItem("ur",`${parseInt(window.localStorage.getItem("ur")??"0")+totalLevel}`),output}async function readDescriptiveData(fileNumber,levelCaps){return fetch(`./assets/unit_data/units_${fileNumber}.csv`).then(r=>r.text()).then(t=>Papa.parse(t,{header:!0,dynamicTyping:!0,skipEmptyLines:!0}).data).then(entries=>entries.map(entry=>{let levelType=levelCaps.find(t=>t.Type===entry.LevelCapFormat);levelType||(levelType=levelCaps.find(t=>"Default"===t.Type));const unitData={id:entry.ID,rarity:entry.Rarity,in_EN:"Y"===entry.InEN,normal_form:entry.NF,evolved_form:entry.EF,true_form:entry.TF,ultra_form:entry.UF,max_form:findFormNumber(entry.NF,entry.EF,entry.TF,entry.UF),level_cap:levelType,talents:parseTalents(entry.Talents),ultra_talents:parseTalents(entry.UltraTalents),orb:new Array(parseInt(entry.OrbCount)).fill(null),favorited:!1,level:0,plus_level:0,current_form:FORM.NORMAL,hidden:!1};if(window.localStorage.getItem(entry.ID)){const decompressed=decodeUnit(window.localStorage.getItem(entry.ID));unitData.current_form=decompressed.current_form,unitData.favorited=decompressed.favorited,unitData.hidden=decompressed.hidden,unitData.level=decompressed.level,unitData.plus_level=decompressed.plus_level;for(let x=0;x<decompressed.orb.length;x++)unitData.orb[x]=decompressed.orb[x];for(let x=0;x<decompressed.talents.length;x++)unitData.talents[x].value=decompressed.talents[x];for(let x=0;x<decompressed.ultra_talents.length;x++)unitData.ultra_talents[x].value=decompressed.ultra_talents[x]}else 0===entry.ID&&(unitData.level=1);return unitData}))}async function readStatData(fileNumber){const output=[];return await fetch(`./assets/unit_data/unit_abilities_${fileNumber}.csv`).then(r=>r.text()).then(t=>Papa.parse(t,{header:!0,dynamicTyping:!0,skipEmptyLines:!0}).data).then(entries=>{for(const entry of entries){const outputObj={cost:parseInt(entry.Cost),health:parseInt(entry.Health),damage:parseInt(entry.Damage),range:parseInt(entry.Range),knockbacks:parseInt(entry.KBCount),speed:parseInt(entry.Speed),cooldown:parseFloat(entry.Cooldown),has_area:"T"===entry.HasArea,abilities:entry.Abilities?.split("-")??[]};"All"===entry.Traits?outputObj.traits=[...SETTINGS.traits]:"Non-Metal"===entry.Traits?outputObj.traits=SETTINGS.traits.filter(t=>"Metal"!=t):outputObj.traits=entry.Traits?.split("-")??[];const id=parseInt(entry.ID)-fileNumber;output[id]?output[id].push(outputObj):output[id]=[outputObj]}}),output}function findFormNumber(...forms){let counter=-1;for(const formName of forms){if(!formName)return counter;counter++}return counter}function parseTalents(talentString){if(!talentString)return[];return talentString.split("-").map(e=>({name:e.replace(/[0-9]+/i,""),cap:parseInt(e.replace(/[^0-9]+/i,"")),value:0}))}export function parseUpgrades(){const abilityIconLevels=window.localStorage.getItem("abo");let upgradeData,upgradeUR=0;return upgradeData=abilityIconLevels?abilityIconLevels.split("-").map(s=>{const parts=s.split("+"),output={level:parseInt(parts[0]),plus:parseInt(parts[1])};return upgradeUR+=output.level+output.plus,output}):SETTINGS.abilities.abilityNames.map(_=>({level:1,plus:0})),window.localStorage.setItem("ur",`${parseInt(window.localStorage.getItem("ur")??"0")+upgradeUR}`),{cgs:"1"===window.localStorage.getItem("cgs"),abilities:upgradeData}}export function parseLoadouts(){const llp=window.localStorage.getItem("llp");return llp?.trim()?llp.split(" ").map(b64=>JSON.parse(window.atob(b64))):[]}