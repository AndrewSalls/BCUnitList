export async function encodeLink(loadoutData,unitData){return unitData.forEach(u=>{u.talents=u.talents.map(t=>t.value),u.ultra_talents=u.ultra_talents.map(t=>t.value)}),encodeDirectLink({title:loadoutData.title,units:unitData,forms:loadoutData.forms,baseLevels:loadoutData.baseLevels})}export function encodeDirectLink(loadoutData){const encodedUnits=loadoutData.units.map(u=>encodeLoadoutUnit(u));return window.btoa(JSON.stringify({title:loadoutData.title,units:encodedUnits,forms:loadoutData.forms,baseLevels:loadoutData.baseLevels}))}export function decodeLink(dataString){const loadoutObj=JSON.parse(window.atob(dataString));return loadoutObj.units=loadoutObj.units.map(u=>decodeUnit(u)),loadoutObj}export function encodeUnitEntry(unitData){let output=encodeUnitData(unitData);return unitData.favorited&&(output+="S"),unitData.hidden&&(output+="H"),output}function encodeLoadoutUnit(unitData){return`I${unitData.id}${encodeUnitData(unitData)}`}export function encodeUnitData(unitData){let output="";return unitData.current_form>0&&(output+=`F${unitData.current_form}`),unitData.level>0&&(output+=`L${unitData.level}`),unitData.plus_level>0&&(output+=`+${unitData.plus_level}`),unitData.talents.some(t=>t>0)&&(output+=`T${unitData.talents.join("-")}`),unitData.ultra_talents.some(t=>t)&&(output+=`U${unitData.ultra_talents.join("-")}`),unitData.orb.some(o=>null!==o)&&(output+=`O${unitData.orb.map(o=>encodeOrb(o)).join("&")}`),output}export function decodeUnit(unitStr){let output={id:0,current_form:0,level:0,plus_level:0,talents:[],ultra_talents:[],orb:[],favorited:!1,hidden:!1};if(!unitStr)return output;let segment,pos=0;do{switch(segment=getSegment(unitStr,pos),segment.segmentType){case"I":output.id=parseInt(unitStr.substring(pos+1,pos+segment.length));break;case"F":output.current_form=parseInt(unitStr.substring(pos+1,pos+segment.length));break;case"L":output.level=parseInt(unitStr.substring(pos+1,pos+segment.length));break;case"+":output.plus_level=parseInt(unitStr.substring(pos+1,pos+segment.length));break;case"T":output.talents=unitStr.substring(pos+1,pos+segment.length).split("-").map(t=>parseInt(t));break;case"U":output.ultra_talents=unitStr.substring(pos+1,pos+segment.length).split("-").map(u=>parseInt(u));break;case"O":output.orb=unitStr.substring(pos+1,pos+segment.length).split("&").map(o=>decodeOrb(o));break;case"S":output.favorited=!0;break;case"H":output.hidden=!0}pos+=segment.length}while(pos<unitStr.length);return output}function getSegment(unitStr,startPos){const segmentType=unitStr.charAt(startPos);let offset;for(offset=1;startPos+offset<unitStr.length&&unitStr.charAt(startPos+offset).match("[0-9&X\\-a-z]");offset++);return{segmentType:segmentType,length:offset}}export function encodeOrb(orb){return null===orb?"X":`${orb.trait}-${orb.type}-${orb.rank}`}export function decodeOrb(orbStr){if("X"===orbStr)return null;const parts=orbStr.split("-");return{trait:parseInt(parts[0]),type:parseInt(parts[1]),rank:parseInt(parts[2])}}