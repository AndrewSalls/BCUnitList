import{encodeUnitEntry}from"../helper/encoder.js";import getCostsFor from"../helper/find-costs.js";import{isGloballyFiltered}from"../unit-table/filter-functions.js";export const RARITY={NORMAL:"N",SPECIAL:"EX",RARE:"RR",SUPER_RARE:"SR",UBER_RARE:"UR",LEGEND_RARE:"LR"};export const FORM={NORMAL:0,EVOLVED:1,TRUE:2,ULTRA:3};export const UNIT_DATA_TYPE={UNIT:"unit",OWNED_FORM_NAMES:"owned name",FORM_NAMES:"name",COST:"cost"};export default class UnitData{#unitData;constructor(unitData){this.#unitData=unitData}static hasAbility(unitData,ability,form=unitData.current_form){return unitData.stats[form].abilities.includes(ability)||unitData.talents.some(t=>t.name===ability&&t.value>0)||unitData.ultra_talents.some(ut=>ut.name===ability&&ut.value>0)}static dataToRecord(unitData){return{id:unitData.id,current_form:unitData.current_form,level:unitData.level,plus_level:unitData.plus_level,talents:unitData.talents.map(t=>t.value),ultra_talents:unitData.ultra_talents.map(u=>u.value),orb:unitData.orb,favorited:unitData.favorited,hidden:unitData.hidden}}getUnitData(id,dataType,checkIfFiltered){return this.getUnitListData([id],dataType,checkIfFiltered)}getUnitListData(unitIDs,dataType,checkIfFiltered){const output=[];for(const id of unitIDs)checkIfFiltered&&isGloballyFiltered(this.#unitData[id])||output.push(this.#unitData[id]);return this.#getDataType(output,dataType)}getAllUnitData(filterFunction,dataType,checkIfFiltered){return filterFunction?this.#getDataType(this.#unitData.filter(u=>filterFunction(u)&&!(checkIfFiltered&&isGloballyFiltered(u))),dataType):this.#getDataType(this.#unitData.filter(u=>!(checkIfFiltered&&isGloballyFiltered(u))),dataType)}updateUnit(data){const id=data.id;this.#unitData[id].current_form=data.current_form??this.#unitData[id].current_form;const oldURCount=this.#unitData[id].level+this.#unitData[id].plus_level;this.#unitData[id].level=data.level??this.#unitData[id].level,this.#unitData[id].plus_level=data.plus_level??this.#unitData[id].plus_level;const userRankDelta=this.#unitData[id].level+this.#unitData[id].plus_level-oldURCount;if(data.talents)for(let i=0;i<this.#unitData[id].talents.length;i++)this.#unitData[id].talents[i].value=data.talents[i];if(data.ultra_talents)for(let i=0;i<this.#unitData[id].ultra_talents.length;i++)this.#unitData[id].ultra_talents[i].value=data.ultra_talents[i];this.#unitData[id].orb=data.orb??this.#unitData[id].orb,this.#unitData[id].favorited=data.favorited??this.#unitData[id].favorited,this.#unitData[id].hidden=data.hidden??this.#unitData[id].hidden;const entry=encodeUnitEntry(data);""!==entry?window.localStorage.setItem(`${data.id}`,entry):window.localStorage.removeItem(`${data.id}`),window.localStorage.setItem("ur",`${parseInt(window.localStorage.getItem("ur")??"0")+userRankDelta}`)}#getDataType(units,dataType){switch(dataType){case UNIT_DATA_TYPE.UNIT:return units;case UNIT_DATA_TYPE.COST:return getCostsFor(units);case UNIT_DATA_TYPE.FORM_NAMES:return units.map(u=>[u.id,u.normal_form,u.evolved_form,u.true_form,u.ultra_form]);case UNIT_DATA_TYPE.OWNED_FORM_NAMES:return units.filter(u=>u.level>0).map(u=>[u.id,u.normal_form,u.evolved_form,u.true_form,u.ultra_form].slice(0,u.current_form+2));default:console.error(`Invalid data type requested: ${dataType}`)}}}