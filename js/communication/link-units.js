import{parseAllCategories}from"../category/category-parser.js";import{getUnitData,parseLoadouts,parseUpgrades}from"../helper/parse-file.js";import UserData from"../data/user-data.js";import MESSAGE_RESPONSE,{RESPONSE_TYPES}from"./handle-message.js";import initializeLocalStorage from"../initialize-localstorage.js";let dataManager=new UserData([],{cgs:!1,abilities:[]},{},[],(_str,_isValid)=>{});export default async function initializeData(frame,messageCallback){await initializeUserData(messageCallback),registerFrame(frame)}export function registerFrame(frame){frame.onload=()=>{const channel=new MessageChannel;channel.port1.onmessage=res=>handleMessage(channel.port1,res),frame.contentWindow?.postMessage("loaded","*",[channel.port2])},frame.contentDocument&&"complete"===frame.contentDocument.readyState&&frame.onload(new Event("load"))}async function handleMessage(port,res){if(res.data.context===RESPONSE_TYPES.DELETE_USER_DATA){const sendMSG=MESSAGE_RESPONSE.get(RESPONSE_TYPES.DISPLAY_MESSAGE);return sendMSG&&sendMSG(dataManager,{message:"Save deleted!",isError:!1},!1),void window.localStorage.setItem("delete_flag","1")}"1"===window.localStorage.getItem("delete_flag")&&await initializeUserData(dataManager.sendMessage);const responseFunc=MESSAGE_RESPONSE.get(res.data.context);if(responseFunc){const output=responseFunc(dataManager,res.data.content,res.data.ignore_filters);output&&output.then?port.postMessage({m_id:res.data.m_id,data:await output}):port.postMessage({m_id:res.data.m_id,data:output})}else console.error(`Unexpected context: "${res.data.context}", unable to finish communication`)}let loadingEventExists=!1,loadingEventListener=[];async function initializeUserData(messageCallback){if(loadingEventExists){return new Promise(res=>{loadingEventListener.push(res)})}{loadingEventExists=!0;const categories=await parseAllCategories();initializeLocalStorage(categories);const upgrades=parseUpgrades(),units=await getUnitData(categories),loadouts=parseLoadouts();dataManager=new UserData(units,upgrades,categories,loadouts,messageCallback),window.localStorage.removeItem("delete_flag");const loadEventFuncs=loadingEventListener;loadingEventListener=[],loadingEventExists=!1;for(const func of loadEventFuncs)func()}}